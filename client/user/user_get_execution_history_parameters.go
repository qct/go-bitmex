// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserGetExecutionHistoryParams creates a new UserGetExecutionHistoryParams object
// with the default values initialized.
func NewUserGetExecutionHistoryParams() *UserGetExecutionHistoryParams {
	var (
		symbolDefault    = string("XBTUSD")
		timestampDefault = strfmt.DateTime("2017-02-13T12:00:00.000Z")
	)
	return &UserGetExecutionHistoryParams{
		Symbol:    symbolDefault,
		Timestamp: timestampDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUserGetExecutionHistoryParamsWithTimeout creates a new UserGetExecutionHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserGetExecutionHistoryParamsWithTimeout(timeout time.Duration) *UserGetExecutionHistoryParams {
	var (
		symbolDefault    = string("XBTUSD")
		timestampDefault = strfmt.DateTime("2017-02-13T12:00:00.000Z")
	)
	return &UserGetExecutionHistoryParams{
		Symbol:    symbolDefault,
		Timestamp: timestampDefault,

		timeout: timeout,
	}
}

// NewUserGetExecutionHistoryParamsWithContext creates a new UserGetExecutionHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserGetExecutionHistoryParamsWithContext(ctx context.Context) *UserGetExecutionHistoryParams {
	var (
		symbolDefault    = string("XBTUSD")
		timestampDefault = strfmt.DateTime("2017-02-13T12:00:00.000Z")
	)
	return &UserGetExecutionHistoryParams{
		Symbol:    symbolDefault,
		Timestamp: timestampDefault,

		Context: ctx,
	}
}

// NewUserGetExecutionHistoryParamsWithHTTPClient creates a new UserGetExecutionHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserGetExecutionHistoryParamsWithHTTPClient(client *http.Client) *UserGetExecutionHistoryParams {
	var (
		symbolDefault    = string("XBTUSD")
		timestampDefault = strfmt.DateTime("2017-02-13T12:00:00.000Z")
	)
	return &UserGetExecutionHistoryParams{
		Symbol:     symbolDefault,
		Timestamp:  timestampDefault,
		HTTPClient: client,
	}
}

/*UserGetExecutionHistoryParams contains all the parameters to send to the API endpoint
for the user get execution history operation typically these are written to a http.Request
*/
type UserGetExecutionHistoryParams struct {

	/*Symbol*/
	Symbol string
	/*Timestamp*/
	Timestamp strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user get execution history params
func (o *UserGetExecutionHistoryParams) WithTimeout(timeout time.Duration) *UserGetExecutionHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user get execution history params
func (o *UserGetExecutionHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user get execution history params
func (o *UserGetExecutionHistoryParams) WithContext(ctx context.Context) *UserGetExecutionHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user get execution history params
func (o *UserGetExecutionHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user get execution history params
func (o *UserGetExecutionHistoryParams) WithHTTPClient(client *http.Client) *UserGetExecutionHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user get execution history params
func (o *UserGetExecutionHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSymbol adds the symbol to the user get execution history params
func (o *UserGetExecutionHistoryParams) WithSymbol(symbol string) *UserGetExecutionHistoryParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the user get execution history params
func (o *UserGetExecutionHistoryParams) SetSymbol(symbol string) {
	o.Symbol = symbol
}

// WithTimestamp adds the timestamp to the user get execution history params
func (o *UserGetExecutionHistoryParams) WithTimestamp(timestamp strfmt.DateTime) *UserGetExecutionHistoryParams {
	o.SetTimestamp(timestamp)
	return o
}

// SetTimestamp adds the timestamp to the user get execution history params
func (o *UserGetExecutionHistoryParams) SetTimestamp(timestamp strfmt.DateTime) {
	o.Timestamp = timestamp
}

// WriteToRequest writes these params to a swagger request
func (o *UserGetExecutionHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param symbol
	qrSymbol := o.Symbol
	qSymbol := qrSymbol
	if qSymbol != "" {
		if err := r.SetQueryParam("symbol", qSymbol); err != nil {
			return err
		}
	}

	// query param timestamp
	qrTimestamp := o.Timestamp
	qTimestamp := qrTimestamp.String()
	if qTimestamp != "" {
		if err := r.SetQueryParam("timestamp", qTimestamp); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
